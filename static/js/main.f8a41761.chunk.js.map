{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","style","backgroundColor","value","Board","i","squareHighlighted","this","winningSpaces","indexOf","console","log","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f8a41761.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  return (\n    <button\n      className=\"square\"\n      onClick={props.onClick}\n      style={{backgroundColor: props.backgroundColor}}\n    >\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    let squareHighlighted;\n    if(this.props.winningSpaces) {\n      squareHighlighted = (this.props.winningSpaces.indexOf(i) !== -1);\n      if(squareHighlighted) {\n        console.log(i);\n      }\n    }\n\n    return (\n      <Square\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n        backgroundColor={squareHighlighted ? '#93A' : '#fff'}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null,)\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1]\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    })\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winningSpaces = calculateWinner(current.squares)\n    const winner = winningSpaces ? current.squares[winningSpaces[0]] : null;\n\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Go to move #' + move :\n        'Go to game start';\n      return (\n        <li key={move}>\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            winningSpaces={winningSpaces}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return [a, b, c];\n    }\n  }\n  return null;\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}